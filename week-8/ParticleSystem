/**
** Kevin's notes:  Great work!  Now the next challenge would be to have the particle system emitter (the center of the system) follow
your mouse position.  The simplest way to do this would be to ammend your addParticle() method to accept an xy position
as parameter.
**/

var system;
var shape = 0;


function setup() {
  createCanvas(720, 720);
 
 
  system = new ParticleSystem(createVector(width/2,height/2),random(5,50));
  colorMode(HSB,360,100,100,360);
  rectMode(CENTER);
}

function draw() {
  background(255);
  system.addParticle();
  system.run();
}


var ParticleEllipse = function(position,size) {
  this.acceleration = createVector(0, 0.05);
  this.velocity = createVector(random(-1, 1), random(-1, 1));
  this.position = position.copy();
  this.lifespan = 360.0;
  this.size = size;
};

ParticleEllipse.prototype.run = function() {

  this.update();
  this.display();
};


ParticleEllipse.prototype.update = function(){

  this.position.add(this.velocity);
  this.lifespan -= 1;
};


// Method to display
ParticleEllipse.prototype.display = function() {


  var colorFrom = color(120,100,100,0);
  var colorTo = color(0,100,100,360);
  var lerpcol = lerpColor(colorFrom,colorTo,map(this.lifespan,0,360,0,1));
  noStroke();
  fill(lerpcol,this.lifespan);

    ellipse(this.position.x, this.position.y, this.size, this.size);
  

};


ParticleEllipse.prototype.isDead = function(){
  if (this.lifespan < 0) {
    return true;
  } else {
    return false;
  }
};

var ParticleRect = function(position,size) {
  this.acceleration = createVector(0, 0.05);
  this.velocity = createVector(random(-1, 1), random(-1, 1));
  this.position = position.copy();
  this.lifespan = 360.0;
  this.size = size;
};

ParticleRect.prototype.run = function() {

  this.update();
  this.display();
};


ParticleRect.prototype.update = function(){

  this.position.add(this.velocity);
  this.lifespan -= 1;
};


ParticleRect.prototype.display = function() {


  var colorFrom = color(120,100,100,0);
  var colorTo = color(0,100,100,360);
  var lerpcol = lerpColor(colorFrom,colorTo,map(this.lifespan,0,360,0,1));
  noStroke();
  fill(lerpcol,this.lifespan);
  
    rect(this.position.x, this.position.y, this.size/2, this.size/2);
  
 
};


ParticleRect.prototype.isDead = function(){
  if (this.lifespan < 0) {
    return true;
  } else {
    return false;
  }
};

var ParticleTri = function(position,size) {
  this.acceleration = createVector(0, 0.05);
  this.velocity = createVector(random(-1, 1), random(-1, 1));
  this.position = position.copy();
  this.lifespan = 360.0;
  this.size = size;
};

ParticleTri.prototype.run = function() {
  
  this.update();
  this.display();
};

// Method to update position
ParticleTri.prototype.update = function(){

  this.position.add(this.velocity);
  this.lifespan -= 1;
};


// Method to display
ParticleTri.prototype.display = function() {
  
  var colorFrom = color(120,100,100,0);
  var colorTo = color(0,100,100,360);
  var lerpcol = lerpColor(colorFrom,colorTo,map(this.lifespan,0,360,0,1));
  noStroke();
  fill(lerpcol,this.lifespan);
  triangle(this.position.x, this.position.y-this.size/2, this.position.x-this.size/2, this.position.y+this.size/2,this.position.x+this.size/2, this.position.y+this.size/2);
 
 
};


ParticleTri.prototype.isDead = function(){
  if (this.lifespan < 0) {
    return true;
  } else {
    return false;
  }
};


var ParticleSystem = function(position) {
  this.origin = position.copy();
  this.particles = [];
  this.num=0;
};

ParticleSystem.prototype.addParticle = function() {
  if(this.num%3 === 0){
  this.particles.push(new ParticleEllipse(this.origin,random(5,50)));}
  else if (this.num%3===1){
    this.particles.push(new ParticleRect(this.origin,random(5,50)));
  }
  else{
    this.particles.push(new ParticleTri(this.origin,random(5,50)));
  }
  this.num++;

  
};

ParticleSystem.prototype.run = function() {
  for (var i = this.particles.length-1; i >= 0; i--) {
    var p = this.particles[i];
    p.run();
    if (p.isDead()) {
      this.particles.splice(i, 1);
    }
  }
};

